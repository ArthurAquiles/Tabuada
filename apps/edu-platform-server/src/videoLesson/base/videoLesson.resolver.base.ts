/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VideoLesson } from "./VideoLesson";
import { VideoLessonCountArgs } from "./VideoLessonCountArgs";
import { VideoLessonFindManyArgs } from "./VideoLessonFindManyArgs";
import { VideoLessonFindUniqueArgs } from "./VideoLessonFindUniqueArgs";
import { CreateVideoLessonArgs } from "./CreateVideoLessonArgs";
import { UpdateVideoLessonArgs } from "./UpdateVideoLessonArgs";
import { DeleteVideoLessonArgs } from "./DeleteVideoLessonArgs";
import { Subject } from "../../subject/base/Subject";
import { VideoLessonService } from "../videoLesson.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VideoLesson)
export class VideoLessonResolverBase {
  constructor(
    protected readonly service: VideoLessonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VideoLesson",
    action: "read",
    possession: "any",
  })
  async _videoLessonsMeta(
    @graphql.Args() args: VideoLessonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VideoLesson])
  @nestAccessControl.UseRoles({
    resource: "VideoLesson",
    action: "read",
    possession: "any",
  })
  async videoLessons(
    @graphql.Args() args: VideoLessonFindManyArgs
  ): Promise<VideoLesson[]> {
    return this.service.videoLessons(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VideoLesson, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VideoLesson",
    action: "read",
    possession: "own",
  })
  async videoLesson(
    @graphql.Args() args: VideoLessonFindUniqueArgs
  ): Promise<VideoLesson | null> {
    const result = await this.service.videoLesson(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VideoLesson)
  @nestAccessControl.UseRoles({
    resource: "VideoLesson",
    action: "create",
    possession: "any",
  })
  async createVideoLesson(
    @graphql.Args() args: CreateVideoLessonArgs
  ): Promise<VideoLesson> {
    return await this.service.createVideoLesson({
      ...args,
      data: {
        ...args.data,

        subject: args.data.subject
          ? {
              connect: args.data.subject,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VideoLesson)
  @nestAccessControl.UseRoles({
    resource: "VideoLesson",
    action: "update",
    possession: "any",
  })
  async updateVideoLesson(
    @graphql.Args() args: UpdateVideoLessonArgs
  ): Promise<VideoLesson | null> {
    try {
      return await this.service.updateVideoLesson({
        ...args,
        data: {
          ...args.data,

          subject: args.data.subject
            ? {
                connect: args.data.subject,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VideoLesson)
  @nestAccessControl.UseRoles({
    resource: "VideoLesson",
    action: "delete",
    possession: "any",
  })
  async deleteVideoLesson(
    @graphql.Args() args: DeleteVideoLessonArgs
  ): Promise<VideoLesson | null> {
    try {
      return await this.service.deleteVideoLesson(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Subject, {
    nullable: true,
    name: "subject",
  })
  @nestAccessControl.UseRoles({
    resource: "Subject",
    action: "read",
    possession: "any",
  })
  async getSubject(
    @graphql.Parent() parent: VideoLesson
  ): Promise<Subject | null> {
    const result = await this.service.getSubject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
